#+TITLE:     Damegender
#+AUTHOR:    David Arroyo MenÃ©ndez
#+EMAIL:     davidam@gnu.org
#+DATE:      [2019-08-21]

#+DESCRIPTION: Example of using org to create presentations using the beamer exporter
#+KEYWORDS:  free software, free documentation, GNU
#+LANGUAGE:  es
#+LATEX_HEADER: \usepackage[spanish]{babel}
# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_THEME: Madrid

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

* A tale from commands
** I have a string, I want the sex

All is simple in the beginning

#+BEGIN_SRC python
$ python3 main.py David
David's gender is male
probability: 1.0
363559  males for David from INE.es
0 females for David from INE.es

$ python3 main.py Isabel
Isabel's gender is female
probability: 1.0
0 males for Isabel from INE.es
271166  females for Isabel from INE.es
#+END_SRC

** Perhaps there are non binary probabilities ...

All is possible if one name is found in different countries

#+BEGIN_SRC bash
$ python3 main.py Andrea
Andrea's gender is female
probability: 0.9808615955404946
2084  males for Andrea from INE.es
106807  females for Andrea from INE.es

$ python3 main.py Alex
Alex's gender is male
probability: 0.9966257742642983
41351  males for Alex from INE.es
140  females for Alex from INE.es
#+END_SRC

** My string has different sex in different countries ...

Genderguesser (old sexmachine) did work for us

#+BEGIN_SRC bash
$ python3 nameincountries.py Andrea
grep -i " Andrea " files/names/nam_dict.txt > files/grep.tmp
males: ['Italy']
females: ['Albania', 'Austria', 'Belgium', 'Bosnia and Herzegovina', 'Croatia', 'Czech Republic', 'Denmark', 'East Frisia', 'Germany', 'Hungary', 'Iceland', 'Ireland', 'Montenegro', 'Slovakia', 'Spain', 'The Netherlands']
both: []
#+END_SRC

#+BEGIN_SRC bash
$ python3 nameincountries.py Alex
grep -i " Alex " files/names/nam_dict.txt > files/grep.tmp
males: ['Azerbaijan', 'Denmark', 'East Frisia', 'France', 'Germany', 'Iceland', 'Norway', 'Slovakia']
females: []
both: []
#+END_SRC

** Now, string is using nicknames ...

We can find a name called "silla". What is the gender of this string?

#+BEGIN_SRC bash
$ python3 main.py silla
silla gender predicted is female
0 males for silla from INE.es
0 females for silla from INE.es
#+END_SRC

The string is not in the dataset. But with damegender we can predict a
gender using artificial intelligence. The classification such as with
spam is only to reduce time or earn money for humans. It is not exact!!

** With this command, we could count males and females in git, mailing lists, etc.

Now, you could count males and females with mails and git:

#+BEGIN_SRC bash
$ python3 mail2gender.py http://mail-archives.apache.org/mod_mbox/httpd-announce/
The number of males sending mails is 5
The number of females sending mails is 1
#+END_SRC

#+BEGIN_SRC bash
$ python3 git2gender.py https://github.com/chaoss/grimoirelab-perceval.git --directory="/tmp/clonedir"
The number of males sending commits is 17
The number of females sending commits is 13
#+END_SRC

** What features in a string is determining the sex?

#+BEGIN_SRC bash
$ python3 infofeatures.py 
---------------------------------------------------------------
Females with letter/s a: 0.7657420999768214 
Males with letter/s a: 0.6717175543601788 
---------------------------------------------------------------
Females with last letter a: 0.4705246078961601 
Males with last letter a: 0.16910371997878626 
---------------------------------------------------------------
Females with last letter o: 0.017306652244456464 
Males with last letter o: 0.10758390787180847 
---------------------------------------------------------------
Females with last letter consonant: 0.2735841767750908
Males with last letter consonant: 0.48738540798545343
---------------------------------------------------------------
Females with last letter vocal: 0.7262612995441552
Males with last letter vocal: 0.5123115387529358
---------------------------------------------------------------
---------------------------------------------------------------
Females with first letter consonant: 0.7968786216487677
Males with first letter consonant: 0.7786195923933631
---------------------------------------------------------------
Females with first letter vocal: 0.2030441165108553
Males with first letter vocal: 0.2213046442912342
#+END_SRC 

** A previous step to Machine Learning. PCA or not PCA (Principal Component Analysis)

#+BEGIN_SRC bash
$ python3 pca-components.py --csv='files/features_list_no_undefined.csv'
#+END_SRC

** PCA or not PCA (Principal Component Analysis)

[[file:img/pca_components_files_features_list_no_undefined.png]]

** PCA or not PCA (II)

#+BEGIN_SRC bash
$ python3 pca-features.py --categorical="both" 
--components=7
$ firefox files/pca.html &
#+END_SRC

** PCA or not PCA (III)

[[file:img/pcatable.png]]

In this analysis, there are 4 components.

The first component is about if the last letter is vocal or
consonant. If the last letter is vocal we can find a male and if the
last letter is a consonant we can find a female.

The second component is about the first letter. The last letter is
determing females and the first letter is determing males.

The third component is not giving relevant information.

The fourth component is giving tha last_letter_a and the
first_letter_vocal is for females.

So, we have our scientific intutions to compose the machine learning model

** Measuring tools and machine learning algorithms
*** APIs

|                |           Accuracy |
| Genderapi      | 0.9687686966482124 |
| Namsor         | 0.7539570378745054 |
| Genderize      | 0.715375918598078  |
| Gender Guesser | 0.6902204635387225 |

*** Machine Learning Algorithms

| Support Vector Machines accuracy        | 0.7049180327868853 |
| NLTK bayes                              | 0.6677501413227812 |
| Bernoulli Naive Bayes                   | 0.5962408140192199 |
| Gaussian Naive Bayes                    | 0.5960994912379876 |
| Stochastic Gradient Descendent accuracy | 0.5873374788015828 |
| Multinomial Naive Bayes                 | 0.5876201243640475 |


* License
** License
Copyright (C) 2019 David Arroyo Menendez
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in [[https://www.gnu.org/copyleft/fdl.html][GNU Free Documentation License]].
