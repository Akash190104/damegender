#+TITLE: Reproducing Comparison and benchmark of name-to-gender inference services
#+AUTHOR: David Arroyo Menéndez
#+OPTIONS: H:2 toc:nil num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* Summary
** Abstract

+ Authors: Lucía Santamaría (Amazon) and Helena Mihaljević (University
  of Applied Sciences)

+ Compare and benchmark five name-to-gender inference services by
  applying them to the classification of a test data set consisting of
  7,076 manually labeled names.

+ The compiled names are analyzed and characterized according to their
  geographical and cultural origin.

+ We define a series of performance metrics to quantify various types
  of classification errors, and define a parameter tuning procedure to
  search for optimal values of the services’ free parameters.

** Comparison and benchmark of name-to-gender inference services (I)

file:../files/comparison-tables.png

** Comparison and benchmark of name-to-gender inference services (I)

|                                        |                 |
| Database size                          | damegender      |
| Regular data updates                   | yes, developing |
| Handles unstructured full name strings | yes             |
| Handles surnames                       | yes             |
| Handles non-Latin alphabets            | no              |
| Implicit geo-localization              | no              |
| Assingment type                        | probabilistic   |
| Free parameters                        | ml              |
| Free license                           | yes             |
| API                                    | future          |
| free requests limited                  | unlimited       |

** Comparison and benchmark of name-to-gender inference services (II): Assembling data

+ zbMath: names from articles, labeled by humans using university websites, Wikipedia articles, etc.
+ genderizeR: from full names searching in Internet biographies, personal data, etc.
+ PubMed: six highest JCR
+ WoS: from 2008 to 2012 included in Science Citation Index Expanded,
  the Social Sciences Citation Index, and the Arts and Humanities
  Citation Index

** Origin of the names (I)

file:../files/geographical-origins-example.png

** Origin of the names (II)

file:../files/comparison-geographical.png

** Retrieval of gender assignments

#+BEGIN_SRC bash
$ python3 api2gender.py David --api=genderguesser
male
#+END_SRC

** Performance metrics (I): accuracy method

#+BEGIN_SRC python
    def accuracy_score_dame(self, v1, v2):
        if (len(v1) == len(v2)):
            success = 0
            fails = 0
            for i in range(0, len(v1)):
                if (v1[i] == v2[i]):
                    success = success + 1
                else:
                    fails = fails + 1
            if (fails == 0):
                accuracy = 1
            else:
                accuracy = success / len(v1)
        else:
            accuracy = 0
            print("Both vectors must have the same length")
        return accuracy
#+END_SRC

** Performance metrics (II): executing accuracy.py

#+BEGIN_SRC bash
$ python3 accuracy.py --csv=files/min.csv
files/min.csv
################### Namsor!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 1, 1, 0, 0]
0.875
Namsor accuracy: 0.875
################### Genderize!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 2, 1, 0, 0]
Genderize accuracy: 1
################### GenderGuesser!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 2, 1, 0, 0]
GenderGuesser accuracy: 0.875
################### Sexmachine!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 2, 1, 0, 0]
Sexmachine accuracy: 0.875
#+END_SRC



** Damegender from the commands (I)
#+BEGIN_SRC bash
# Detect gender from a name
$ python3 main.py David
male
# Count gender from a csv example file
$ python3 csv2gender.py files/partial.csv
The number of males in files/partial.csv is 16
The number of females in files/partial.csv is 3
The number of gender not recognised in files/partial.csv is 2
# Count gender from a git repository
$ python3 git2gender.py https://github.com/chaoss/grimoirelab-perceval.git --directory="/tmp/clonedir"
The number of males sending commits is 15
The number of females sending commits is 7
#+END_SRC

**** This will be formatted as a beamer note                       :B_note:
     :PROPERTIES:
     :BEAMER_env: note
     :END:

** Damegender from the commands (II)

#+BEGIN_SRC bash
# Count gender from a mailing list
$ cd files
$ wget -c http://mail-archives.apache.org/mod_mbox/httpd-announce/201706.mbox
$ cd ..
$ python3 mail2gender.py http://mail-archives.apache.org/mod_mbox/httpd-announce/
# Use an api to detect the gender
$ python3 api2gender.py David --api=genderguesser
male
# To measure success
$ python3 accuracy.py
Namsor accuracy: 0.9047619047619048
Sexmachine accuracy: 0.7619047619047619
#+END_SRC

** Damegender from the commands (III)

#+BEGIN_SRC bash
$ python3 confusion.py
A confusion matrix C is such that Ci,j is equal to the number of observations known to be in group i but predicted to be in group j.
If the classifier is nice, the diagonal is high because there are true positives
Namsor confusion matrix:
 [[ 3  0  0]
 [ 0 16  0]
 [ 0  2  0]]
Sexmachine confusion matrix:
 [[ 2  1  0]
 [ 2 14  0]
 [ 1  1  0]]

# To deploy a graph about correlation between variables
$ python3 corr.py
# To create the pickle models in files directory
$ python3 damemodels.py
#+END_SRC

** Damegender as an exercise to practice NLTK and Perceval

#+BEGIN_SRC bash
~/git/python-examples/nlp/nltk: (dev) $ python3 sexmachine.py
What's your name?: David
What's my name?: Elena
David is male and Elena is female. Enjoy!.
The classifier has an accuracy: 0.052
Most Informative Features
             last_letter = 'a'            female : male   =     35.5 : 1.0
             last_letter = 'k'              male : female =     34.1 : 1.0
             last_letter = 'f'              male : female =     15.9 : 1.0
             last_letter = 'p'              male : female =     13.5 : 1.0
             last_letter = 'v'              male : female =     12.7 : 1.0
#+END_SRC

** Damegender choosing features

#+BEGIN_SRC bash
$ python3 infofeatures.py
---------------------------------------------------------------
Females with last letter a: 0.4705246078961601
Males with last letter a: 0.048672566371681415
---------------------------------------------------------------
Females with last letter consonant: 0.2735841767750908
Males with last letter consonant: 0.6355328972681801
---------------------------------------------------------------
Females with last letter vocal: 0.7262612995441552
Males with last letter vocal: 0.3640823393612928
---------------------------------------------------------------
#+END_SRC

** Damegender coding features

#+BEGIN_SRC python
    def features_int(self, name):
    # features method created to check the scikit classifiers
        features_int = {}
        features_int["first_letter"] = ord(name[0].lower())
        features_int["last_letter"] = ord(name[-1].lower())
        for letter in 'abcdefghijklmnopqrstuvwxyz':
            features_int["count({})".format(letter)] = name.lower().count(letter)
        features_int["vocals"] = 0
        for letter1 in 'aeiou':
            for letter2 in name:
                if (letter1 == letter2):
                    features_int["vocals"] = features_int["vocals"] + 1
        features_int["consonants"] = 0
        for letter1 in 'bcdfghjklmnpqrstvwxyz':
            for letter2 in name:
                if (letter1 == letter2):
                    features_int["consonants"] = features_int["consonants"] + 1
        if (name[0].lower() in 'aeiou'):
            features_int["first_letter_vocal"] = 1
        else:
            features_int["first_letter_vocal"] = 0
        if (name[0].lower() in 'bcdfghjklmnpqrstvwxyz'):
            features_int["first_letter_consonant"] = 1
        else:
            features_int["first_letter_consonant"] = 0
        if (name[-1].lower() in 'aeiou'):
            features_int["last_letter_vocal"] = 1
        else:
            features_int["last_letter_vocal"] = 0
        if (name[-1].lower() in 'bcdfghjklmnpqrstvwxyz'):
            features_int["last_letter_consonant"] = 1
        else:
            features_int["last_letter_consonant"] = 0
        # h = hyphen.Hyphenator('en_US')
        # features_int["syllables"] = len(h.syllables(name))
        if (name[-1].lower() == "a"):
            features_int["last_letter_a"] = 1
        else:
            features_int["last_letter_a"] = 0
        return features_int
#+END_SRC

** Damegender the nltk standard model

#+BEGIN_SRC python
    def classifier(self):
        labeled_names = ([(name, 'male') for name in names.words('male.txt')] +
                         [(name, 'female') for name in names.words('female.txt')])
        featuresets = [(self.features(n), gender) for (n, gender) in labeled_names]
        train_set, test_set = featuresets[500:], featuresets[:500]
        classifier = nltk.NaiveBayesClassifier.train(train_set)
        return classifier

    def guess(self, name, binary=False):
        guess = ''
        guess = super().guess(name, binary)
        if ((guess == 'unknown') | (guess == 2)):
            classifier = self.classifier()
            guess = classifier.classify(self.features(name))
            if binary:
                if (guess=='male'):
                    guess = 1
                elif (guess=='female'):
                    guess = 0
        return guess
#+END_SRC


** Damegender building a ML model (scikit)

#+BEGIN_SRC python
    def sgd(self):
    # Scikit classifier
        X = np.array(self.features_list(path="files/all.csv"))
        y = self.gender_list("files/all.csv")
        clf = SGDClassifier(loss="log").fit(X,y)
        filename = 'files/sgd_model.sav'
        pickle.dump(clf, open(filename, 'wb'))
        return clf

    def sgd_load(self):
        pkl_file = open('files/sgd_model.sav', 'rb')
        clf = pickle.load(pkl_file)
        pkl_file.close()
        return clf
#+END_SRC

** Damegender using a ML model (scikit)

#+BEGIN_SRC bash
$ cat main.py
#+END_SRC

** Damegender and perceval from string to gender

1. removeMail
2. string2array
3. string2gender (taking into account surnames and prefixes)

** Damegender classes and methods (I)

file:../files/dame_gender.png

** Damegender classes and methods (II)

file:../files/dame_sexmachine.png

** Damegender and the bussiness
+ In CMS: wordpress, drupal, joomla
+ In dictionaries: google translate, babylon, gnu dict, ...
+ Enciclopedias: wikipedia,  ...
--
+ A good technical project has a good bussiness project and an interfaz for end users.
+ A Free Software license and community can be a good point.
