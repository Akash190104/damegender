#+TITLE: NLTK, Scikit y Damegender como ejemplo de aplicación
#+AUTHOR: David Arroyo Menéndez
#+OPTIONS: H:2 toc:nil num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* Summary
** Machine Learning is for predictions

+ Quantities
+ Categories (with data training or not)
+ What properties is predicting

** Scikit Graph

file:../files/images/scikit-graph.png

** In classification our data are properties and a variable for the prediction

file:../files/images/naivebayes-table.png

** Practical NLTK
#+BEGIN_SRC bash
$ git clone https://github.com/davidam/GAPLEN.git
$ sudo pip3 install GAPLEN
#+END_SRC

In NLP the machine learning is a classification task:

1. Sentiment Analysis
2. Detect Gender
3. Sentence Similarity
4. Text Summary
5. Classify Documents
6. Manage Words
singulars/plurals, dictionary entries, stopwords
7. Gramatical Trees
8. Extract Keywords
9. Disambiguation

** Classification: SGD

We want predict a category and we’ve labeled
data with <100k samples
#+BEGIN_SRC bash
$ python3 plot_sgd_iris.py
$ python3 sgd.py
#+END_SRC

** Classification: Kernel Approximation
We want predict a category and we’ve labeled
data with <100k samples and SGD is not working

#+BEGIN_SRC bash
$ python3 kernel-approximation.py
#+END_SRC

** Classification: Naive Bayes Examples

#+BEGIN_SRC bash
$ python3 gaussiannb.py
$ python3 bernoullinb.py
$ python3 multinomialnb.py
$ python3 nltk/sexmachine.py
#+END_SRC

** Sentiment Analysis
*** Tweets positives versus negatives
#+BEGIN_SRC bash
    $ python3 tweet-sentyment.py
    $ python3 tweepy-example.py
#+END_SRC

** Sentence Similarity
*** Your name is your gender                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 sentence-similarity.py
    $ nosetests3 test/test_sentencesimilarity.py
#+END_SRC

** Classify Documents
*** Classify Documents                                              :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 doc-classification-ch06.py
#+END_SRC

** Classify Newsgroups
*** Classify Newsgroups                                             :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 nltk-sklearn.py
#+END_SRC

** Synonims and Antonims
*** Synonims and Antonims                                           :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 synonims-antonims.py
#+END_SRC

** Singulars and Plurals
*** Singulars and Plurals 					    :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 stem.py
    $ nosetests3 test/test_stem.py
#+END_SRC
** Stopwords
For some search engines, these are some of the most common, short
function words, such as the, is, at, which, and on. In this case, stop
words can cause problems when searching for phrases that include them

*** Singulars and Plurals 					    :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 stopwords.py
    $ nosetests3 test/test_stopwords.py
#+END_SRC

** Lemmas: dictionary entries
*** Lemmas: dictionary entries                                      :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 wordnet-lemmatizer.py
    $ nosetests3 test/test_wordnet.py:TddInPythonExample.test_synonims_lemmas_method_returns_correct_result
#+END_SRC

** Trees
*** Trees                                                           :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    I can build a gramatic or semantic tree from a sentence
    $ python3 semantic-tree.py
    I can generate sentences from a gramatic
    $ python3 howtos/generate.py
    I can visualize a gramatic
    $ python3 parse-tree.py
    I can obtain bigrams, trigrams or ngrams
    $ python3 bigrams-trigrams.py
    $ nosetests3 test/test_bigrams_trigrams.py
    I can print a tree from sintactic pairs
    $ python3 code-chinker.py
    I can build sintactic pairs from a sentence and print a tree
    $ python3 tokenizeandtag.py
#+END_SRC

** Corpus
*** Corpus                                                          :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 gutenberg.py
    $ nosetests3 test/test_gutenberg.py
    $ python3 corpus-howto-new-corpus.py
#+END_SRC

** Keywords: rake algorithm
*** Keywords: rake algorithm                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 nltk-rake.py
#+END_SRC

** Disambiguation
*** Disambiguation                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
$ python test_all_words_wsd.py
$ python test_wsd.py

# Remember synset
$ python3 wordnet-example.py
$ nosetests3 test/test_wordnet.py
#+END_SRC

** Detect Gender
*** Detect your gender from your name with nltk 			:B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.98
    :BEAMER_ENV: block
    :END:
#+BEGIN_SRC bash
    $ python3 sexmachine.py
    $ python3 perceval_git_counter_sexmachine.py
    $ python3 perceval_mbox_sexmachine.py
#+END_SRC

** Execute damegender program

#+BEGIN_SRC bash
# Detect gender from a name (INE is the dataset used by default)
$ python3 main.py David
David gender is male
363559  males for David from INE.es
0 females for David from INE.es

# Detect gender from a name from multiple dataset
$ python3 main.py David --total="all"
David gender is male
375099 males and 9 females from all census (INE + Uk census + USA census)

# Detect gender from a name only using machine learning (experimental way)
$ python3 main.py Mesa --ml=nltk
Mesa gender is female
0 males for Mesa from INE.es
0 females for Mesa from INE.es
#+END_SRC

** Counting males and females in mailing lists and repositories

#+BEGIN_SRC bash
# Count gender from a git repository
$ python3 git2gender.py https://github.com/chaoss/grimoirelab-perceval.git --directory="/tmp/clonedir"
The number of males sending commits is 15
The number of females sending commits is 7

# Count gender from a mailing list
$ cd files/mbox
$ wget -c http://mail-archives.apache.org/mod_mbox/httpd-announce/201706.mbox
$ cd ..
$ python3 mail2gender.py http://mail-archives.apache.org/mod_mbox/httpd-announce/
#+END_SRC

** Use an api to detect gender

#+BEGIN_SRC bash
# Use an api to detect the gender
$ python3 api2gender.py Leticia --surname="Martin" --api=namsor
female
scale: 0.99

# Google popularity for a name
$ python3 gendergoogle.py Leticia
Google results of Leticia as male: 42300
Google results of Leticia as female: 63400
#+END_SRC

** Informative Features

#+BEGIN_SRC bash
# Give me informative features
$ python3 infofeatures.py
Females with last letter a: 0.4705246078961601
Males with last letter a: 0.048672566371681415
Females with last letter consonant: 0.2735841767750908
Males with last letter consonant: 0.6355328972681801
Females with last letter vocal: 0.7262612995441552
Males with last letter vocal: 0.3640823393612928
#+END_SRC

** To measure success

#+BEGIN_SRC bash
$ python3 accuracy.py --csv=files/names/min.csv
################### NLTK!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 0, 1, 0, 0]
Dame Gender accuracy: 0.875

$ python3 accuracy.py --api="genderize" --csv=files/names/min.csv
################### Genderize!!
Gender list: [1, 1, 1, 1, 2, 1, 0, 0]
Guess list:  [1, 1, 1, 1, 2, 1, 0, 0]
Genderize accuracy: 1
#+END_SRC

** Where is the confusion? Guessing males or females?

#+BEGIN_SRC bash
$ python3 confusion.py
A confusion matrix C is such that Ci,j is equal to the number of observations known to be in group i but predicted to be in group j.
If the classifier is nice, the diagonal is high because there are true positives
Namsor confusion matrix:
 [[2 0 0]
 [0 5 0]
 [0 1 0]]
Genderize confusion matrix:
 [[2 0 0]
 [0 5 0]
 [0 0 1]]
Gender Guesser confusion matrix:
 [[2 0 0]
 [0 5 0]
 [0 1 0]]
Sexmachine confusion matrix:
 [[2 0 0]
 [0 5 0]
 [1 0 0]]
Nameapi confusion matrix:
 [[0 0 2]
 [0 0 5]
 [0 0 1]]
#+END_SRC

** To analyze errors guessing names from a csv

#+BEGIN_SRC bash
$ python3 errors.py --csv="files/names/all.csv" --api="genderguesser"
Gender Guesser with files/names/all.csv has:
+ The error code: 0.22564457518601835
+ The error code without na: 0.026539047204698716
+ The na coded: 0.20453365634192766
+ The error gender bias: 0.0026103980857080703
#+END_SRC

** Support Python and Libremanuals
El Tutorial de Python
por Guido Van Rossum
