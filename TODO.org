#+TODO: TODO(t) POSIBLE(p) POSSIBLE(p) FUTURE(f) | DONE(d!) CANCELED(c!)


* DONE Reflexionar la manera de nombrar las clases
  SCHEDULED: <2018-12-11 mar>
  - State "DONE"       from "TODO"       [2018-12-11 mar 16:12]
* TODO Hacer comparativa de clasificadores
** DONE Crear métodos de accuracy y confusion_matrix
   - State "DONE"       from "TODO"       [2018-11-15 jue 11:53]
** DONE Escribir la clase gender genérica desde lo aprendido en la clase sexmachine
   - State "DONE"       from "TODO"       [2018-12-14 vie 21:21]
Por ahora valdría con llegar a migrar los métodos necesarios hasta ejecutar accuracy y confusion matrix
** TODO Reescribir todas las clases api heredando de gender
** TODO Crear los accuracy de los clasificadores, compararlos entre ellos y con las apis
* DONE Estudiar las relaciones entre las variables escogidas
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:58]
Mirar python-examples/matplotlib/corr.py
* FUTURE Crear la tarea de aprendizaje de dado el string de nombre descubrir nombre y apellidos si los hay
** DONE Crear método guess_surname
   - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
* DONE Hacer los test requeridos para string2array
  - State "DONE"       from "TODO"       [2018-11-15 jue 11:52]
* DONE Meter en guess todos los clasificadores
  - State "DONE"       from "FUTURE"     [2018-12-14 vie 21:21]
    def guess(self, name, classifier_type):
    # guess method to check names dictionary and nltk classifier
        guess = ''
        if name in names.words('male.txt'):
#            guess = 'male' # 1
            guess = np.array([1])
        elif name in names.words('female.txt'):
#            guess = 'female' # 0
            guess = np.array([0])
        else:
           if (classifier_type == 'gaussianNB'):
               m = self.bernoulliNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           elif (classifier_type == 'multinomialNB'):
               m = self.multinomialNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           elif (classifier_type == 'bernoulliNB'):
               m = self.bernoulliNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           else: # nltk default
               classifier = self.classifier()
               guess = classifier.classify(self.features(name))
        return guess
* DONE Plantearse renombrarlo a damegender
  SCHEDULED: <2018-11-16 vie>
  - State "DONE"       from "TODO"       [2018-12-10 lun 12:55]
* DONE guess en Gendernamsor
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:58]
    # def guess(Gender, name, surname, binary=False):
    # # guess method to check names dictionary and nltk classifier
    #     guess = super(Gender, self).gender()
    #     guess = ''
    #     if name in names.words('male.txt'):
    #         if binary:
    #             guess = 1
    #         else:
    #             guess = 'male'
    #     elif name in names.words('female.txt'):
    #         if binary:
    #             guess = 0
    #         else:
    #             guess = 'female'
    #     else:
    #         r = requests.get('https://api.namsor.com/onomastics/api/json/gender/'+ name +'/' + surname)
    #         d = json.loads(r.text)
    #         if binary:
    #             if (d['gender']=='female'):
    #                 guess = 0
    #             elif (d['gender']=='male'):
    #                 guess = 1
    #             else:
    #                 guess = 2
    #         else:
    #             guess = d['gender']
    #     return guess
* DONE Escribir comando para adivinar un nombre
  - State "DONE"       from "TODO"       [2018-11-19 lun 19:18]
* DONE Escribir comando git2gender.py
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
Dada una url obtener número y porcentaje de hombres y mujeres
** TODO Escribir método string2name
Dada una cadena con espacios en blanco:
1. Crea un array.
2. Recorre el array hasta encontrar el primer nombre.
2.1 Es nombre si no está en la lista de apellidos.
3. Devuelve el primer nombre.

* DONE Escribir comando gender2csv.py
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
Dado un fichero csv obtener número y porcentaje de hombres y mujeres
* DONE Hay un problema con los acentos
  - State "DONE"       from "TODO"       [2018-11-22 jue 08:30]
Probar
$ python3 main.py Inés
$ python3 main.py Ines
* FUTURE Hay un problema con los nombres que aparecen en male.txt y female.txt
Probar
$ python3 main.py Andrea
Para esto lo mejor es devolver una probabilidad. Usar INE.es puede ser una opción.
* DONE Meter en el requirements la dependencia de hyphenation
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:11]
* DONE Reescribir num_males y num_females con el método list_commiters de GenderGit
  SCHEDULED: <2018-11-22 jue>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:10]
* DONE Escribir tests para main.py, csv2gender y git2gender
  SCHEDULED: <2018-11-23 vie>
  - State "DONE"       from "TODO"       [2018-11-29 jue 09:48]
* TODO Para csv2gender:
** en file deberías reconocer:
+ [ ] formato csv
+ [ ] tiene las rows importantes
** en sexmachine
+ [ ] trabajar por path en vez de all y partial
+ [ ] detectar si el fichero existe
* TODO Echar un vistazo a https://www.nameapi.org/en/developer/
* DONE En csv
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:57]
  first_letter; last_letter; a; b; c; d; e; f; g; h; i; j; k; l; m; n; o; p; q; r; s; t; u; v; w; x; y; z; vocals; consonants; first_letter_vocal; last_letter_vocal; syllables
* TODO Mejora corr.py para determinar si las variables son independientes
+ [ ] Separar variables categóricas y no categóricas
+ [ ] Crear una gráfica para variables categóricas
+ [ ] Crear una gráfica para variables no categóricas
* TODO Lanzar los accuracy para determinar la mejor herramienta de género
+ [X] sexmachine
+ [X] namsor
+ [ ] genderguesser
+ [ ] genderapi
+ [ ] genderize

Hay un problema que accuracy parece que usa el guess padre y no la instancia, ya que devuelve el mismo resultado en todos
* TODO Para mejorar accuracy es bueno incluir en male.txt y female.txt los nombres de ine.es
  SCHEDULED: <2018-12-22 sáb>
* DONE Escribir api2gender.py dada una api y un nombre, extraer el género y la probabilidad si la da la api
  SCHEDULED: <2018-12-13 jue>
* DONE Reemplazar DameSexmachine heredando de Gender
  - State "DONE"       from "TODO"       [2018-12-14 vie 21:18]
* TODO Usar pickle para los algoritmos de scikit, ayudará a que ejecutar tests no sea un infierno
+ [X] damemodels.py
+ [ ] hacer tests usando pickle

#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2018  David Arroyo Menéndez

# Author: David Arroyo Menéndez <davidam@gnu.org>
# Maintainer: David Arroyo Menéndez <davidam@gnu.org>

# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA,

import csv
import requests
import json
from app.dame_gender import Gender


class DameGenderApi(Gender):
    def guess(self, name):
        fichero = open("files/genderapipass.txt", "r+")
        contenido = fichero.readline()
        r = requests.get('https://gender-api.com/get?name='+name+'&key='+contenido)
        j = json.loads(r.text)
        return j['gender']

* DONE males_list and females_list
  - State "DONE"       from "TODO"       [2018-12-23 dom 17:33]
* DONE Guess
  SCHEDULED: <2018-12-24 lun>
  - State "DONE"       from "TODO"       [2018-12-23 dom 19:24]
    def guess(self, name, binary=False):
    # guess method to check names dictionary
        guess = ''
        name = unidecode.unidecode(name).title()
        name.replace(name,"")
        m = self.males_list()
        f = self.females_list()
        if (name in m) and (name in f):
            if binary:
                guess = 2
            else:
                guess = 'unknown'
        elif name in m:
            if binary:
                guess = 1
            else:
                guess = 'male'
        elif name in f:
            if binary:
                guess = 0
            else:
                guess = 'female'
        else:
            if binary:
                guess = 2
            else:
                guess = 'unknown'
        return guess
* TODO A comentar
Baby name guesser usa google para determinar si alguien es chico o chica
Supongo que podría ser el número de resultados en Google "name female", "name male"
* DONE Para main.py
  - State "DONE"       from "TODO"       [2018-12-24 lun 12:59]
if (len(sys.argv) > 1):
    if (args.ml):
        s = DameSexmachine()
        m = s.sgd_load()
        predicted = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0, 1]])
        sex = ""
        if predicted:
            sex = "male"
        else:
            sex = "female"
        print("%s gender is %s" % (str(args.name), sex))
    else:
        print("%s gender is %s" % (str(args.name), s.guess(args.name)))
